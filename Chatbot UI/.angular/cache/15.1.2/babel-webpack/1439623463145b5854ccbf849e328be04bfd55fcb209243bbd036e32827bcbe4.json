{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet AppComponent = class AppComponent {\n  constructor(formBuilder, backend) {\n    this.formBuilder = formBuilder;\n    this.backend = backend;\n    this.messages = [];\n    this.isUserSpeaking = false;\n    this.isStoppedSpeechRecog = false;\n    this.chatForm = this.formBuilder.group({\n      message: ['', Validators.required]\n    });\n    this.messages.push({\n      text: 'Hello, My Name is Jarvis, How can I help you?',\n      image: '',\n      from: 'bot',\n      time: new Date().toDateString()\n    });\n  }\n  onSubmit() {\n    this.messages.push({\n      text: this.chatForm.value.message,\n      from: 'me',\n      time: new Date().toDateString()\n    });\n    this.stopRecording();\n    this.backend.postMethod({\n      message: this.chatForm.value.message\n    }).subscribe(response => {\n      console.log(response);\n      this.chatForm.reset();\n      for (let index = 0; index < response.length; index++) {\n        this.messages.push({\n          text: response[index].text,\n          image: response[index].image,\n          from: 'bot',\n          time: new Date().toDateString()\n        });\n        this.backend.readText(response[index].text);\n        this.scrollToBottom();\n      }\n    });\n    console.log(this.messages);\n  }\n  ngOnInit() {\n    this.initVoiceInput();\n    this.scrollToBottom();\n    this.backend.readText('Hello, My Name is Jarvis, How can I help you?');\n  }\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n  scrollToBottom() {\n    try {\n      this.chatScrollContainer.nativeElement.scrollTop = this.chatScrollContainer.nativeElement.scrollHeight;\n    } catch (err) {}\n  }\n  /**\r\n   * @description Function to stop recording.\r\n   */\n  stopRecording() {\n    this.backend.stop();\n    this.isUserSpeaking = false;\n  }\n  /**\r\n   * @description Function for initializing voice input so user can chat with machine.\r\n   */\n  initVoiceInput() {\n    // Subscription for initializing and this will call when user stopped speaking.\n    this.backend.init().subscribe(() => {\n      // User has stopped recording\n      // Do whatever when mic finished listening\n    });\n    // Subscription to detect user input from voice to text.\n    this.backend.speechInput().subscribe(input => {\n      // Set voice text output to\n      this.chatForm.controls['message'].setValue(input);\n    });\n  }\n  /**\r\n   * @description Function to enable voice input.\r\n   */\n  startRecording() {\n    this.isUserSpeaking = true;\n    this.backend.start();\n    this.chatForm.controls['message'].reset();\n  }\n};\n__decorate([ViewChild('scrollMe')], AppComponent.prototype, \"chatScrollContainer\", void 0);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,SAAS,QAAoB,eAAe;AAChE,SAGEC,UAAU,QAGL,gBAAgB;AAOhB,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAQvBC,YACSC,WAAwB,EACxBC,OAA8B;IAD9B,gBAAW,GAAXD,WAAW;IACX,YAAO,GAAPC,OAAO;IARhB,aAAQ,GAAQ,EAAE;IAGX,mBAAc,GAAY,KAAK;IACtC,yBAAoB,GAAG,KAAK;IAM1B,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACrCC,OAAO,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ;KAClC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC;MACjBC,IAAI,EAAE,+CAA+C;MACrDC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,YAAY;KAC9B,CAAC;EACJ;EAEAC,QAAQ;IACN,IAAI,CAACR,QAAQ,CAACC,IAAI,CAAC;MACjBC,IAAI,EAAE,IAAI,CAACN,QAAQ,CAACa,KAAK,CAACX,OAAO;MACjCM,IAAI,EAAE,IAAI;MACVC,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,YAAY;KAC9B,CAAC;IACF,IAAI,CAACG,aAAa,EAAE;IAEpB,IAAI,CAACf,OAAO,CACTgB,UAAU,CAAC;MAAEb,OAAO,EAAE,IAAI,CAACF,QAAQ,CAACa,KAAK,CAACX;IAAO,CAAE,CAAC,CACpDc,SAAS,CAAEC,QAAa,IAAI;MAC3BC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrB,IAAI,CAACjB,QAAQ,CAACoB,KAAK,EAAE;MACrB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGJ,QAAQ,CAACK,MAAM,EAAED,KAAK,EAAE,EAAE;QACpD,IAAI,CAACjB,QAAQ,CAACC,IAAI,CAAC;UACjBC,IAAI,EAAEW,QAAQ,CAACI,KAAK,CAAC,CAACf,IAAI;UAC1BC,KAAK,EAAEU,QAAQ,CAACI,KAAK,CAAC,CAACd,KAAK;UAC5BC,IAAI,EAAE,KAAK;UACXC,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,YAAY;SAC9B,CAAC;QACF,IAAI,CAACZ,OAAO,CAACwB,QAAQ,CAACN,QAAQ,CAACI,KAAK,CAAC,CAACf,IAAI,CAAC;QAC3C,IAAI,CAACkB,cAAc,EAAE;;IAEzB,CAAC,CAAC;IACJN,OAAO,CAACC,GAAG,CAAC,IAAI,CAACf,QAAQ,CAAC;EAC5B;EAEAqB,QAAQ;IACN,IAAI,CAACC,cAAc,EAAE;IACrB,IAAI,CAACF,cAAc,EAAE;IACrB,IAAI,CAACzB,OAAO,CAACwB,QAAQ,CAAC,+CAA+C,CAAC;EACxE;EAEAI,kBAAkB;IAChB,IAAI,CAACH,cAAc,EAAE;EACvB;EAEAA,cAAc;IACZ,IAAI;MACF,IAAI,CAACI,mBAAmB,CAACC,aAAa,CAACC,SAAS,GAC9C,IAAI,CAACF,mBAAmB,CAACC,aAAa,CAACE,YAAY;KACtD,CAAC,OAAOC,GAAG,EAAE;EAChB;EAEA;;;EAGAlB,aAAa;IACX,IAAI,CAACf,OAAO,CAACkC,IAAI,EAAE;IACnB,IAAI,CAACC,cAAc,GAAG,KAAK;EAC7B;EAEA;;;EAGAR,cAAc;IACZ;IACA,IAAI,CAAC3B,OAAO,CAACoC,IAAI,EAAE,CAACnB,SAAS,CAAC,MAAK;MACjC;MACA;IAAA,CACD,CAAC;IAEF;IACA,IAAI,CAACjB,OAAO,CAACqC,WAAW,EAAE,CAACpB,SAAS,CAAEqB,KAAK,IAAI;MAC7C;MACA,IAAI,CAACrC,QAAQ,CAACsC,QAAQ,CAAC,SAAS,CAAC,CAACC,QAAQ,CAACF,KAAK,CAAC;IACnD,CAAC,CAAC;EACJ;EAEA;;;EAGAG,cAAc;IACZ,IAAI,CAACN,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACnC,OAAO,CAAC0C,KAAK,EAAE;IACpB,IAAI,CAACzC,QAAQ,CAACsC,QAAQ,CAAC,SAAS,CAAC,CAAClB,KAAK,EAAE;EAC3C;CACD;AAnGwBsB,YAAtBhD,SAAS,CAAC,UAAU,CAAC,yDAA8C;AADzDE,YAAY,eALxBH,SAAS,CAAC;EACTkD,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACWjD,YAAY,CAoGxB;SApGYA,YAAY","names":["Component","ViewChild","Validators","AppComponent","constructor","formBuilder","backend","chatForm","group","message","required","messages","push","text","image","from","time","Date","toDateString","onSubmit","value","stopRecording","postMethod","subscribe","response","console","log","reset","index","length","readText","scrollToBottom","ngOnInit","initVoiceInput","ngAfterViewChecked","chatScrollContainer","nativeElement","scrollTop","scrollHeight","err","stop","isUserSpeaking","init","speechInput","input","controls","setValue","startRecording","start","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Chatbot UI\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, ViewChild, ElementRef } from '@angular/core';\nimport {\n  FormGroup,\n  FormControl,\n  Validators,\n  FormArray,\n  FormBuilder,\n} from '@angular/forms';\nimport { BackendServiceService } from './../_services/backend-service.service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  @ViewChild('scrollMe') private chatScrollContainer: ElementRef<any>;\n  messages: any = [];\n  chatForm: FormGroup;\n\n  public isUserSpeaking: boolean = false;\n  isStoppedSpeechRecog = false;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    public backend: BackendServiceService\n  ) {\n    this.chatForm = this.formBuilder.group({\n      message: ['', Validators.required],\n    });\n    this.messages.push({\n      text: 'Hello, My Name is Jarvis, How can I help you?',\n      image: '',\n      from: 'bot',\n      time: new Date().toDateString(),\n    });\n  }\n\n  onSubmit() {\n    this.messages.push({\n      text: this.chatForm.value.message,\n      from: 'me',\n      time: new Date().toDateString(),\n    });\n    this.stopRecording();\n\n    this.backend\n      .postMethod({ message: this.chatForm.value.message })\n      .subscribe((response: any) => {\n        console.log(response);\n        this.chatForm.reset();\n        for (let index = 0; index < response.length; index++) {\n          this.messages.push({\n            text: response[index].text,\n            image: response[index].image,\n            from: 'bot',\n            time: new Date().toDateString(),\n          });\n          this.backend.readText(response[index].text);\n          this.scrollToBottom();\n        }\n      });\n    console.log(this.messages);\n  }\n\n  ngOnInit(): void {\n    this.initVoiceInput();\n    this.scrollToBottom();\n    this.backend.readText('Hello, My Name is Jarvis, How can I help you?');\n  }\n\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom(): void {\n    try {\n      this.chatScrollContainer.nativeElement.scrollTop =\n        this.chatScrollContainer.nativeElement.scrollHeight;\n    } catch (err) {}\n  }\n\n  /**\n   * @description Function to stop recording.\n   */\n  stopRecording() {\n    this.backend.stop();\n    this.isUserSpeaking = false;\n  }\n\n  /**\n   * @description Function for initializing voice input so user can chat with machine.\n   */\n  initVoiceInput() {\n    // Subscription for initializing and this will call when user stopped speaking.\n    this.backend.init().subscribe(() => {\n      // User has stopped recording\n      // Do whatever when mic finished listening\n    });\n\n    // Subscription to detect user input from voice to text.\n    this.backend.speechInput().subscribe((input) => {\n      // Set voice text output to\n      this.chatForm.controls['message'].setValue(input);\n    });\n  }\n\n  /**\n   * @description Function to enable voice input.\n   */\n  startRecording() {\n    this.isUserSpeaking = true;\n    this.backend.start();\n    this.chatForm.controls['message'].reset();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}