{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./../_services/backend-service.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/icon\";\nconst _c0 = [\"scrollMe\"];\nfunction AppComponent_div_3_div_1_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const msg_r4 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", msg_r4.text, \" \");\n  }\n}\nfunction AppComponent_div_3_div_1_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵelement(1, \"img\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const msg_r4 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", msg_r4.image, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction AppComponent_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵelement(1, \"div\", 12);\n    i0.ɵɵelementStart(2, \"div\", 13)(3, \"div\", 14)(4, \"div\", 15);\n    i0.ɵɵtext(5, \"Bot\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 16);\n    i0.ɵɵtext(7, \"12:45\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(8, AppComponent_div_3_div_1_div_8_Template, 2, 1, \"div\", 17);\n    i0.ɵɵtemplate(9, AppComponent_div_3_div_1_div_9_Template, 2, 1, \"div\", 17);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const msg_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngIf\", msg_r4.text);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", msg_r4.image);\n  }\n}\nfunction AppComponent_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵelement(1, \"div\", 12);\n    i0.ɵɵelementStart(2, \"div\", 13)(3, \"div\", 14)(4, \"div\", 15);\n    i0.ɵɵtext(5, \"Atul\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 16);\n    i0.ɵɵtext(7, \"12:46\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 18);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const msg_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate1(\" \", msg_r4.text, \" \");\n  }\n}\nfunction AppComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, AppComponent_div_3_div_1_Template, 10, 2, \"div\", 9);\n    i0.ɵɵtemplate(2, AppComponent_div_3_div_2_Template, 10, 1, \"div\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const msg_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", msg_r4.from == \"bot\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", msg_r4.from == \"me\");\n  }\n}\nfunction AppComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_8_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.startRecording());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 22);\n    i0.ɵɵtext(2, \"mic\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AppComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Recording... \");\n    i0.ɵɵelementStart(2, \"button\")(3, \"mat-icon\", 23);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_9_Template_mat_icon_click_3_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.resetRecording());\n    });\n    i0.ɵɵtext(4, \"refresh\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nexport class AppComponent {\n  constructor(formBuilder, backend) {\n    this.formBuilder = formBuilder;\n    this.backend = backend;\n    this.messages = [];\n    this.showMic = false;\n    this.isUserSpeaking = false;\n    this.isStoppedSpeechRecog = false;\n    this.chatForm = this.formBuilder.group({\n      message: ['', Validators.required]\n    });\n    this.messages.push({\n      // text: 'Hello, My Name is Jarvis, How can I help you?',\n      text: 'Hi,I am your HR Helpdesk Augmented Assistant.\\n Here are the things you can do with the assistant\\n1 - Apply Leave \\n2 - Check In \\n3 - Check Out',\n      image: '',\n      from: 'bot',\n      time: new Date().toDateString()\n    });\n  }\n  onSubmit() {\n    this.showMic = false;\n    this.messages.push({\n      text: this.chatForm.value.message,\n      from: 'me',\n      time: new Date().toDateString()\n    });\n    this.stopRecording();\n    this.backend.postMethod({\n      message: this.chatForm.value.message\n    }).subscribe(response => {\n      console.log(response);\n      this.chatForm.reset();\n      for (let index = 0; index < response.length; index++) {\n        this.messages.push({\n          text: response[index].text,\n          image: response[index].image,\n          from: 'bot',\n          time: new Date().toDateString()\n        });\n        this.backend.readText(response[index].text);\n        this.scrollToBottom();\n      }\n    });\n    console.log(this.messages);\n  }\n  ngOnInit() {\n    this.initVoiceInput();\n    this.scrollToBottom();\n    this.backend.readText('Hi,I am your HR Helpdesk Augmented Assistant.\\n Here are the things you can do with the assistant\\n1 - Apply Leave\\n2 - Check In \\n3 - Check Out');\n  }\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n  scrollToBottom() {\n    try {\n      this.chatScrollContainer.nativeElement.scrollTop = this.chatScrollContainer.nativeElement.scrollHeight;\n    } catch (err) {}\n  }\n  /**\r\n   * @description Function to stop recording.\r\n   */\n  stopRecording() {\n    this.backend.stop();\n    this.isUserSpeaking = false;\n  }\n  /**\r\n   * @description Function for initializing voice input so user can chat with machine.\r\n   */\n  initVoiceInput() {\n    // Subscription for initializing and this will call when user stopped speaking.\n    this.backend.init().subscribe(() => {\n      // User has stopped recording\n      // Do whatever when mic finished listening\n    });\n    // Subscription to detect user input from voice to text.\n    this.backend.speechInput().subscribe(input => {\n      // Set voice text output to\n      this.chatForm.controls['message'].setValue(input);\n    });\n  }\n  /**\r\n   * @description Function to enable voice input.\r\n   */\n  startRecording() {\n    this.showMic = true;\n    this.isUserSpeaking = true;\n    this.backend.start();\n    this.chatForm.controls['message'].reset();\n  }\n  /**\r\n   * trying reset\r\n   */\n  resetRecording() {\n    // Reset the form control for message\n    this.chatForm.controls['message'].reset();\n    // Start a new recording\n    this.startRecording();\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.BackendServiceService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  viewQuery: function AppComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chatScrollContainer = _t.first);\n    }\n  },\n  decls: 10,\n  vars: 4,\n  consts: [[1, \"msger\"], [\"scrollMe\", \"\"], [1, \"msger-chat\"], [4, \"ngFor\", \"ngForOf\"], [1, \"msger-inputarea\", 3, \"formGroup\"], [\"type\", \"text\", \"placeholder\", \"Enter your message...\", \"formControlName\", \"message\", 1, \"msger-input\"], [\"type\", \"submit\", 1, \"msger-send-btn\", 3, \"click\"], [3, \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"msg left-msg\", 4, \"ngIf\"], [\"class\", \"msg right-msg\", 4, \"ngIf\"], [1, \"msg\", \"left-msg\"], [1, \"msg-img\", 2, \"background-image\", \"url(https://www.w3schools.com/howto/img_avatar.png)\"], [1, \"msg-bubble\"], [1, \"msg-info\"], [1, \"msg-info-name\"], [1, \"msg-info-time\"], [\"class\", \"msg-text\", 4, \"ngIf\"], [1, \"msg-text\"], [2, \"width\", \"300px\", 3, \"src\"], [1, \"msg\", \"right-msg\"], [3, \"click\"], [1, \"mic\"], [1, \"msger-reset-btn\", 3, \"click\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0, 1)(2, \"main\", 2);\n      i0.ɵɵtemplate(3, AppComponent_div_3_Template, 3, 2, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 4);\n      i0.ɵɵelement(5, \"input\", 5);\n      i0.ɵɵelementStart(6, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_6_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵtext(7, \"Send\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, AppComponent_div_8_Template, 3, 0, \"div\", 7);\n      i0.ɵɵtemplate(9, AppComponent_div_9_Template, 5, 0, \"div\", 8);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.chatForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", !ctx.showMic);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showMic);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i4.MatIcon],\n  styles: [\"var[_ngcontent-%COMP%]   resource[_ngcontent-%COMP%];\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\tvar __webpack_modules__ = ({\\n\\n 595:\\n\\n (() => {\\n\\nthrow new Error(\\\"Module build failed (from ./node_modules/sass-loader/dist/cjs.js):\\\\nSassError: expected \\\\\\\";\\\\\\\".\\\\n    \\u2577\\\\n102 \\u2502     padding: 10px;\\\\n    \\u2502            ^\\\\n    \\u2575\\\\n  src\\\\\\\\app\\\\\\\\app.component.scss 102:12  root stylesheet\\\");\\n\\n })\\n\\n \\t});\\n\\n \\t\\n \\t// startup\\n \\t// Load entry module and return exports\\n \\t// This entry module doesn't tell about it's top-level declarations so it can't be inlined\\n \\tvar __webpack_exports__ = {};\\n \\t__webpack_modules__[595]();\\n \\tresource = __webpack_exports__;\\n \\t\\n })()\\n;\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","AppComponent","constructor","formBuilder","backend","chatForm","group","message","required","messages","push","text","image","from","time","Date","toDateString","onSubmit","showMic","value","stopRecording","postMethod","subscribe","response","console","log","reset","index","length","readText","scrollToBottom","ngOnInit","initVoiceInput","ngAfterViewChecked","chatScrollContainer","nativeElement","scrollTop","scrollHeight","err","stop","isUserSpeaking","init","speechInput","input","controls","setValue","startRecording","start","resetRecording","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["D:\\Chatbot UI\\src\\app\\app.component.ts","D:\\Chatbot UI\\src\\app\\app.component.html"],"sourcesContent":["import { Component, ViewChild, ElementRef } from '@angular/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {\n  FormGroup,\n  FormControl,\n  Validators,\n  FormArray,\n  FormBuilder,\n} from '@angular/forms';\nimport { BackendServiceService } from './../_services/backend-service.service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  @ViewChild('scrollMe') private chatScrollContainer: ElementRef<any>;\n  messages: any = [];\n  chatForm: FormGroup;\n  showMic:Boolean = false;\n  public isUserSpeaking: boolean = false;\n  isStoppedSpeechRecog = false;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    public backend: BackendServiceService\n  ) {\n    this.chatForm = this.formBuilder.group({\n      message: ['', Validators.required],\n    });\n    this.messages.push({\n      // text: 'Hello, My Name is Jarvis, How can I help you?',\n      text: 'Hi,I am your HR Helpdesk Augmented Assistant.\\n Here are the things you can do with the assistant\\n1 - Apply Leave \\n2 - Check In \\n3 - Check Out',\n      image: '',\n      from: 'bot',\n      time: new Date().toDateString(),\n    });\n  }\n\n  onSubmit() {\n    this.showMic = false;\n    this.messages.push({\n      text: this.chatForm.value.message,\n      from: 'me',\n      time: new Date().toDateString(),\n    });\n    this.stopRecording();\n\n    this.backend\n      .postMethod({ message: this.chatForm.value.message })\n      .subscribe((response: any) => {\n        console.log(response);\n        this.chatForm.reset();\n        for (let index = 0; index < response.length; index++) {\n          this.messages.push({\n            text: response[index].text,\n            image: response[index].image,\n            from: 'bot',\n            time: new Date().toDateString(),\n          });\n          this.backend.readText(response[index].text);\n          this.scrollToBottom();\n        }\n      });\n    console.log(this.messages);\n  }\n\n  ngOnInit(): void {\n    this.initVoiceInput();\n    this.scrollToBottom();\n    this.backend.readText('Hi,I am your HR Helpdesk Augmented Assistant.\\n Here are the things you can do with the assistant\\n1 - Apply Leave\\n2 - Check In \\n3 - Check Out');\n  }\n\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom(): void {\n    try {\n      this.chatScrollContainer.nativeElement.scrollTop =\n        this.chatScrollContainer.nativeElement.scrollHeight;\n    } catch (err) {}\n  }\n\n  /**\n   * @description Function to stop recording.\n   */\n  stopRecording() {\n    this.backend.stop();\n    this.isUserSpeaking = false;\n  }\n\n  /**\n   * @description Function for initializing voice input so user can chat with machine.\n   */\n  initVoiceInput() {\n    // Subscription for initializing and this will call when user stopped speaking.\n    this.backend.init().subscribe(() => {\n      // User has stopped recording\n      // Do whatever when mic finished listening\n    });\n\n    // Subscription to detect user input from voice to text.\n    this.backend.speechInput().subscribe((input) => {\n      // Set voice text output to\n      this.chatForm.controls['message'].setValue(input);\n    });\n  }\n\n  /**\n   * @description Function to enable voice input.\n   */\n  startRecording() {\n    this.showMic = true;\n    this.isUserSpeaking = true;\n    this.backend.start();\n    this.chatForm.controls['message'].reset();\n  }\n\n  /**\n   * trying reset\n   */\n   resetRecording() {\n      \n    // Reset the form control for message\n    this.chatForm.controls['message'].reset();\n  \n    // Start a new recording\n    this.startRecording();\n  }\n}\n","<section class=\"msger\" #scrollMe>\n\n  <main class=\"msger-chat\">\n    <div *ngFor=\"let msg of messages\">\n      <div class=\"msg left-msg\" *ngIf=\"msg.from=='bot'\">\n        <div class=\"msg-img\" style=\"background-image: url(https://www.w3schools.com/howto/img_avatar.png)\"></div>\n\n        <div class=\"msg-bubble\">\n          <div class=\"msg-info\">\n            <div class=\"msg-info-name\">Bot</div>\n            <div class=\"msg-info-time\">12:45</div>\n          </div>\n\n          <div class=\"msg-text\" *ngIf=\"msg.text\">\n            {{msg.text}}\n          </div>\n          <div class=\"msg-text\" *ngIf=\"msg.image\">\n            <img [src]=\"msg.image\" style=\"width: 300px;\">\n          </div>\n        </div>\n      </div>\n\n      <div class=\"msg right-msg\" *ngIf=\"msg.from=='me'\">\n        <div class=\"msg-img\" style=\"background-image: url(https://www.w3schools.com/howto/img_avatar.png)\"></div>\n\n        <div class=\"msg-bubble\">\n          <div class=\"msg-info\">\n            <div class=\"msg-info-name\">Atul</div>\n            <div class=\"msg-info-time\">12:46</div>\n          </div>\n\n          <div class=\"msg-text\">\n            {{msg.text}}\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </main>\n  <form class=\"msger-inputarea\" [formGroup]=\"chatForm\">\n    <input type=\"text\" class=\"msger-input\" placeholder=\"Enter your message...\" formControlName=\"message\">\n\n    <button type=\"submit\" (click)=\"onSubmit()\" class=\"msger-send-btn\">Send</button>\n  \n    <div  *ngIf=\"!showMic\" (click)=\"startRecording()\" ><mat-icon class=\"mic\">mic</mat-icon></div>\n    <div *ngIf=\"showMic\">\n      Recording...\n      <!-- <div><mat-icon (click)=\"resetRecording()\" class=\"mic\" >refresh</mat-icon></div> -->\n      <button ><mat-icon (click)=\"resetRecording()\" class=\"msger-reset-btn\">refresh</mat-icon></button>\n    </div>\n\n  </form>\n\n</section>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}